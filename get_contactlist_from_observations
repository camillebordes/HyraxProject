# Function to deal with bservation data
### 1: Call data and set data formats
get_contactlist_from_observations <- function(experiment, Experiments, List_Individuals) {
  
  Observations <- openxlsx::read.xlsx(xlsxFile = "~/Dropbox/Hyraxes/3_Observation data_Corrected.xlsx", 
                                      sheet = 1, startRow = 2, colNames = TRUE, detectDates = TRUE)
  n <- nrow(Experiments[Experiments$Number==experiment,])
  canyon <- stringr::str_to_lower(Experiments$Canyon[Experiments$Number == experiment])[1]
  start <- Experiments$start[Experiments$Number == experiment][1]
  end   <- Experiments$end[Experiments$Number == experiment][n]
  
  Observations <- Observations[between(Observations$Date, start + ddays(1), end + ddays(5)),]
  Observations$Interacting <- ifelse(!is.na(Observations$Receiver), 
                                            as.character(paste0(Observations$`Focal./initatior.(chip)`, " ", Observations$Receiver)), 
                                            Observations$`Focal./initatior.(chip)`)
  Observations$Interacting <- strsplit(stringr::str_squish(Observations$Interacting), " ")
  Observations$Date <- as.Date(as.POSIXct(Observations$Date, format = '%y-%m-%d'))
  Observations$Time <- as.POSIXct(as.numeric(Observations$Time)*60*60*24, origin = Observations$Date)
  
  Observations <- Observations[Observations$Behavior %in% c("sit", "stand", "lie", "cuddle", "lean", "walk", "run"),]
  Observations <- Observations[Observations$Site == canyon,]
  for (i in 1:nrow(Observations)){
    if (length(Observations$Interacting[[i]] > 0)) {
      for (j in 1:length(Observations$Interacting[[i]])){
        a <- Observations$Interacting[[i]][j]
        if (a %in% List_Individuals$Chip){
          b <- match(a, List_Individuals$Chip)
          if (List_Individuals$Age_Class[b]=="Pup") {Observations$Interacting[[i]][j] <- "Pup"}
          if (List_Individuals$Sex[b] == "F") {Observations$from[i] <- as.character(List_Individuals$Group[b])}
        }
      }
    }
  }
  
  for (ligne in 1:nrow(Observations)){
    Observations$Interacting[[ligne]] <- grep(pattern = "UnID", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
    Observations$Interacting[[ligne]] <- grep(pattern = "UnM", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
    Observations$Interacting[[ligne]] <- grep(pattern = "UM", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
    Observations$Interacting[[ligne]] <- grep(pattern = "Pup", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
    Observations$Interacting[[ligne]] <- grep(pattern = "pup", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
    Observations$Interacting[[ligne]] <- grep(pattern = "UNID", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
    Observations$Interacting[[ligne]] <- grep(pattern = "NoValue", x = Observations$Interacting[[ligne]], invert = TRUE, value = TRUE)
  }
  New <- Observations %>% select(Site, Date, Time, Interacting)
  colnames(New) <- c("Canyon", "Date", "Start", "Chip")
  
  for (i in 1:nrow(New)) {
    
    a <- data_frame(Canyon = canyon, Date = as.Date(start), Start = as.POSIXct(start), Individual1 = NA, Individual2 = NA)
    if (length(New$Chip[[i]]) == 1) {
      a <- as.data.frame(cbind(New[i,1:3], New$Chip[[i]], NA))
      colnames(a) <- c("Canyon", "Date", "Start", "Individual1", "Individual2")
    }
    if (length(New$Chip[[i]]) >  1 ) {
      b <- t(combn(unlist(New$Chip[[i]]), 2))
      c <- New[i, 1:3]
      c <- c[rep(seq_len(nrow(c)), each = nrow(b)),]
      a <- cbind(c, b)
      colnames(a) <- c("Canyon", "Date", "Start", "Individual1", "Individual2")
    }
    if (i == 1) {last.df <- as.data.frame(a)} else {last.df <- rbind(last.df, as.data.frame(a))}
    
  }
  last.df$Chip <- strsplit(paste0(last.df[,4], ":", last.df[,5]), ":")
  colnames(last.df) <- c("Canyon", "Date", "Start", "Individual1", "Individual2", "Chip")
  
  return(last.df) 
}
