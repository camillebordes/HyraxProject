# This functions randomize between several lists (2 by 2), recalculates node attributes for each randomization and calculates differences between node attributes between adjacent stages.
compare_between_stage1 <- function(TimeEdgelist, sub1) {
  
  t <- 2
  transition <- c("Response", "Recovery")
  
  # List of interactions
  list1 <- TimeEdgelist[between(as.Date(TimeEdgelist$Date), sub1$start[1], sub1$end[1]),]
  list2 <- TimeEdgelist[between(as.Date(TimeEdgelist$Date), sub1$start[2], sub1$end[2]),]
  list3 <- TimeEdgelist[between(as.Date(TimeEdgelist$Date), sub1$start[3], sub1$end[3]),]
  
  # Pre-treatment vs Treatment
  A <- randomize_between_list(list1, list2, list_ind, perm)
  A1 <- A[[1]]
  A2 <- A[[2]]
  array1 <- Abind(A1, A2, along = 1)
  Node1 <- get_node_attributes(A1, list_ind, perm, experiment = experiment)
  Node1 <- Abind(Node1, get_node_attributes(A2, list_ind, perm, experiment = experiment), along = 2)
  
  # Treatment vs 3rd phase
  A <- randomize_between_list(list2, list3, list_ind, perm)
  A3 <- A[[1]]
  A4 <- A[[2]]
  Node2 <- get_node_attributes(A3, list_ind, perm, experiment = experiment)
  Node2 <- Abind(Node2, get_node_attributes(A4, list_ind, perm, experiment = experiment), along = 2)
  array2 <- Abind(A3, A4, along = 1)
  
  # 3rd phase vs 4th phase
  if (experiment == "3a") {
    list4 <- TimeEdgelist[between(as.Date(TimeEdgelist$Date), sub1$start[4], sub1$end[4]),]
    A <- randomize_between_list(list3, list4, list_ind, perm)
    A5 <- A[[1]]
    A6 <- A[[2]]
    Node3 <- get_node_attributes(A5, list_ind, perm, experiment = experiment)
    Node3 <- Abind(Node3, get_node_attributes(A6, list_ind, perm, experiment = experiment), along = 2)
    array3 <- Abind(A5, A6, along = 1)
    t <- 3
    transition <- c("Response", "Intensification", "Recovery")
  }
  
  # Comparison of social dynamics between stages
  DiffStage <- data.frame(experiment = rep(experiment, t*14),
                         start = rep(exp_start, t*14),
                         end = rep(exp_end, t*14),
                         transition = rep(transition, 14),
                         measure = c(rep("canyon_density", t),
                                     rep("cluster_density", t),
                                     rep("canyon_transitivity", t),
                                     rep("cluster_transitivity", t),
                                     rep("size", t), 
                                     rep("canyon_modularity", t), 
                                     rep("cluster_modularity", t), 
                                     rep("local_clustering", t),
                                     rep("deg_assor", t),
                                     rep("sex_assor", t),
                                     rep("age_assor", t),
                                     rep("age_assor2", t),
                                     rep("social_differentiation", t),
                                     rep("association_stability", t)),
                        value = NA,
                        p.rand.inf = NA,
                        p.rand.sup = NA,
                        mean.rand = NA,
                        up.rand = NA,
                        low.rand = NA)
  
  for (i in 1:nrow(DiffStage)) {
    
    if (DiffStage$transition[i] == "Response") {
      metrics <- Node1
      array <- array1
    }
    if (DiffStage$transition[i] == "Recovery") {
      metrics <- Node2
      array <- array2
    }
    if (DiffStage$transition[i] == "Intensification") {
      metrics <- Node3
      array <- array3
    }
    
    if (DiffStage$measure[i] == "association_stability") {
      
      # Association stability
      DiffStage$value[i] <- ecodist::mantel(as.dist(array[1,,])~as.dist(array[perm+2,,]))[1]
      inf <- 0
      sup <- 0
      r <- c()
      for (j in 1:(perm+1)) {
        corr <- ecodist::mantel(as.dist(array[j,,])~as.dist(array[j+perm+1,,]))[1]
        r <- c(r, corr)
        if (DiffStage$value[i] < corr) {inf <- inf+1}
        if (DiffStage$value[i] > corr) {sup <- sup+1}
      }
      DiffStage$p.rand.inf[i] <- inf/perm
      DiffStage$p.rand.sup[i] <- sup/perm
      DiffStage$mean.rand[i] <- MeanCI(r, na.rm = T)[1]
      DiffStage$up.rand[i] <- MeanCI(r, na.rm = T)[3]
      DiffStage$low.rand[i] <- MeanCI(r, na.rm = T)[2]
      
    } else {
      
      # Store the observed value
      d1 <- as.data.frame(metrics[1, (1:dim(array)[2]),])
      d2 <- as.data.frame(metrics[1, (dim(array)[2]+1):(2*dim(array)[2]),])
      x <- match(DiffStage$measure[i], colnames(d1))
      DiffStage$value[i] <- mean(as.numeric(as.character(d1[, x])), na.rm = T) - mean(as.numeric(as.character(d2[, x])), na.rm = T)
     
      # Calculate statistical significance & random values
      inf <- 0
      sup <- 0
      r <- c()
      for (j in 1:perm) {
        rand1 <- as.data.frame(metrics[j+1, (1:dim(array)[2]),])
        rand2 <- as.data.frame(metrics[j+1, (dim(array)[2]+1):(2*dim(array)[2]),])
        x <- match(DiffStage$measure[i], colnames(rand1))
        diffval <- mean(as.numeric(as.character(rand1[,x])), na.rm = T) - mean(as.numeric(as.character(rand2[,x])), na.rm = T)
        if (!is.na(diffval) & !is.na(DiffStage$value[i])) {
          r <- c(r, as.numeric(as.character(rand1[,x])) - as.numeric(as.character(rand2[,x])))
          if (abs(DiffStage$value[i]) < abs(diffval)) {inf <- inf+1}
          if (abs(DiffStage$value[i]) > abs(diffval)) {sup <- sup+1}
        } else {next}
      }
      DiffStage$p.rand.inf[i] <- inf/perm
      DiffStage$p.rand.sup[i] <- sup/perm
      DiffStage$mean.rand[i] <- MeanCI(r, na.rm = T)[1]
      DiffStage$up.rand[i] <- MeanCI(r, na.rm = T)[3]
      DiffStage$low.rand[i] <- MeanCI(r, na.rm = T)[2]
    }
  }
  
  return(DiffStage)

}
